{% if HasOperations -%}
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

{% if GenerateClientInterfaces -%}
{% if ExportTypes %}export {% endif %}interface I{{ Class }} {
{%     for operation in Operations -%}
    {% template Client.Method.Documentation %}
    {{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): Promise<{{ operation.ResultType }}>;
{%     endfor -%}
}

{% endif -%}
{% if ExportTypes %}export {% endif %}class {{ Class }} {% if GenerateClientInterfaces %}implements I{{ Class }} {% endif %}{
    private instance: AxiosInstance;
    private baseUrl: string;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance || axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "{{ BaseUrl }}";
    }
{% for operation in Operations -%}

    {% template Client.Method.Documentation %}
    {{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): Promise<{{ operation.ResultType }}> {
        let url_ = this.baseUrl + "/{{ operation.Path }}{% if operation.HasQueryParameters %}?{% endif %}";
{% for parameter in operation.QueryParameters -%}
{% if parameter.IsRequired -%}
{% if parameter.IsNullable -%}
        if ({{ parameter.VariableName }} === undefined)
            throw new Error("The parameter '{{ parameter.VariableName }}' must be defined.");
        else if({{ parameter.VariableName }} !== null)
            url_ += "{{ parameter.Name }}=" + encodeURIComponent("" + {{ parameter.VariableName }}) + "&";
{% else -%}
        if ({{ parameter.VariableName }} === undefined || {{ parameter.VariableName }} === null)
            throw new Error("The parameter '{{ parameter.VariableName }}' must be defined and cannot be null.");
        else
            url_ += "{{ parameter.Name }}=" + encodeURIComponent("" + {{ parameter.VariableName }}) + "&";
{% endif -%}
{% else -%}
        if ({{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null)
            url_ += "{{ parameter.Name }}=" + encodeURIComponent("" + {{ parameter.VariableName }}) + "&";
{% endif -%}
{% endfor -%}
        url_ = url_.replace(/[?&]$/, "");

        const config: AxiosRequestConfig = {
            method: "{{ operation.HttpMethodUpper }}",
            url: url_,
            headers: {
{%     for parameter in operation.HeaderParameters -%}
                "{{ parameter.Name }}": {{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null ? "" + {{ parameter.VariableName }} : "",
{%     endfor -%}
{%     if operation.HasContent -%}
                "Content-Type": "application/json",
{%     endif -%}
{%     if operation.HasResultType -%}
                "Accept": "application/json"
{%     endif -%}
            }{% if operation.HasContent -%},
            data: {{ operation.ContentParameter.VariableName }}
{%     endif -%}
        };

        return this.instance.request(config)
            .then((response: AxiosResponse<{{ operation.ResultType }}>) => {
                return response.data;
            })
            .catch((error: any) => {
                if (axios.isAxiosError(error) && error.response) {
                    const response = error.response;
                    const data = response.data;
                    
                    if (response.status === 400) {
                        throw new {{ ExceptionClassName }}("Bad Request", response.status, JSON.stringify(response.data), response.headers, data);
                    } else if (response.status === 401) {
                        throw new {{ ExceptionClassName }}("Unauthorized", response.status, JSON.stringify(response.data), response.headers, data);
                    } else if (response.status === 403) {
                        throw new {{ ExceptionClassName }}("Forbidden", response.status, JSON.stringify(response.data), response.headers, data);
                    } else if (response.status === 404) {
                        throw new {{ ExceptionClassName }}("Not Found", response.status, JSON.stringify(response.data), response.headers, data);
                    } else if (response.status === 500) {
                        throw new {{ ExceptionClassName }}("Server Error", response.status, JSON.stringify(response.data), response.headers, data);
                    }
                    
                    throw new {{ ExceptionClassName }}(`An unexpected error occurred: ${error.message}`, response.status, JSON.stringify(response.data), response.headers, data);
                }
                
                throw error;
            });
    }
{% endfor -%}
}
{% endif -%}